// CSS Un-Grammar.
//
// This grammar specifies the structure of CSS's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// See `csslancer/src/parser/grammar_generator.rs` for the code generation.
// See `csslancer/src/parser/ast/generated.rs` for the output.
// 
// Legend:
//   //          -- comment
//   Name =      -- non-terminal definition
//   'identifier'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node




SourceFile =
    Todo

// ========================== //
// SELECTOR
// ========================== //

Selector = Todo
SimpleSelector = Todo
SelectorInterpolation = Todo
SelectorCombinator = Todo
SelectorCombinatorParent = Todo
SelectorCombinatorSibling = Todo
SelectorCombinatorAllSiblings = Todo
SelectorCombinatorShadowPiercingDescendant = Todo
SelectorClass = Todo
SelectorIdentifier = Todo
SelectorElementName = Todo
SelectorPseudo = Todo

SelectorAttribute = 
  '['
  NamespacePrefix?
  'identifier'
  Operator
  BinaryExpression
  ']'

// ========================== //
// BODY DECLARATION
// ========================== //

BodyDeclaration =
  RuleSet
| Page
| PageBoxMarginBox
| ViewPort
| Document
| CustomPropertySet
| Supports
| FontFace
| Media
| Layer
| Keyframe
| KeyframeSelector
| Container
| PropertyAtRule
| UnknownAtRule

RuleSet = 
    Selector*

Page = 
    Todo

PageBoxMarginBox = 
    Todo

ViewPort = 
    Todo

Document =
    Todo

CustomPropertySet =
    Todo
    
Supports = 
    Todo

FontFace = 
    Todo

Media = 
    Todo

Layer =
    names:Todo

Keyframe =
    Todo
    'identifier'

KeyframeSelector = 
    Todo

Container =
    Todo

PropertyAtRule = 
    name:'identifier'

UnknownAtRule =
    name:Todo


// ========================== //
// ABSTRACT DECLARATION
// ========================== //

AbstractDeclaration = 
  Declaration
| DeclarationXcssVariable // (see xcss)

Declaration =
  Todo // just here so this becomes a proper node instead of an enum node which has no Typed Node
  DeclarationBasic
| DeclarationCustomProperty

DeclarationBasic =
    Property
    ':'
    // XCSS NestedProperties?
    Expression

DeclarationCustomProperty = 
    Property
    ':'
    CustomPropertySet

// XCSS NODE
DeclarationXcssVariable =
    Todo

// ========================== //
// MISCELLANEOUS
// ========================== //

Declarations = Todo

Property = 
    'identifier'

Expression = 
    Todo

BinaryExpression = 
    left:Term
    operator:Operator
    right:Term

Term = 
    Operator?
    Expression

Operator = 
    Todo

StringLiteral =
    Todo

UriLiteral =
    Todo

Function = 
    'identifier'

NumericValue = Todo
HexColorValue = Todo
RatioValue = Todo
Prio = Todo
Import = Todo
Namespace = Todo
MediaQuery = Todo
MediaCondition = Todo
MediaFeature = Todo
FunctionArgument = 
    'identifier'
    value:Todo
SupportsCondition = 
    '(' ')'
NamespacePrefix = 
    Todo
GridLine = Todo
UnicodeRange = 
    range_start:Todo
    range_end:Todo
LayerNameList = Todo

Todo =
    'identifier'