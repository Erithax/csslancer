//! Generated by `sourcegen_ast`, do not edit by hand.

#![allow(bad_style, missing_docs, unreachable_pub)]
#[doc = r" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT`."]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
#[repr(u16)]
pub enum SyntaxKind {
    #[doc(hidden)]
    TOMBSTONE,
    #[doc(hidden)]
    EOF,
    ERROR,
    IDENT,
    WHITESPACE,
    COMMENT,
    SEMICOLON,
    COMMA,
    L_PAREN,
    R_PAREN,
    L_CURLY,
    R_CURLY,
    L_BRACK,
    R_BRACK,
    L_ANGLE,
    R_ANGLE,
    AT,
    POUND,
    TILDE,
    QUESTION,
    DOLLAR,
    AMP,
    PIPE,
    PLUS,
    STAR,
    SLASH,
    CARET,
    PERCENT,
    UNDERSCORE,
    DOT,
    DOT2,
    DOT3,
    DOT2EQ,
    COLON,
    COLON2,
    EQ,
    EQ2,
    FAT_ARROW,
    BANG,
    NEQ,
    MINUS,
    THIN_ARROW,
    LTEQ,
    GTEQ,
    PLUSEQ,
    MINUSEQ,
    PIPEEQ,
    AMPEQ,
    CARETEQ,
    SLASHEQ,
    STAREQ,
    PERCENTEQ,
    AMP2,
    PIPE2,
    SHL,
    SHR,
    SHLEQ,
    SHREQ,
    DIM_EM,
    DIM_EX,
    DIM_PX,
    DIM_CM,
    DIM_MM,
    DIM_IN,
    DIM_PT,
    DIM_PC,
    DIM_DEG,
    DIM_RAD,
    DIM_GRAD,
    DIM_MS,
    DIM_S,
    DIM_HZ,
    DIM_KHZ,
    DIM_PERCENT,
    DIM_FR,
    DIM_DPI,
    DIM_DPCM,
    DIM_CQW,
    DIM_CQH,
    DIM_CQI,
    DIM_CQB,
    DIM_CQMIN,
    DIM_CQMAX,
    SOURCE_FILE,
    RULE_SET,
    SELECTOR,
    SIMPLE_SELECTOR,
    SELECTOR_INTERPOLATION,
    SELECTOR_COMBINATOR,
    SELECTOR_COMBINATOR_PARENT,
    SELECTOR_COMBINATOR_SIBLING,
    SELECTOR_COMBINATOR_ALL_SIBLINGS,
    SELECTOR_COMBINATOR_SHADOW_PIERCING_DESCENDANT,
    PAGE,
    PAGE_BOX_MARGIN_BOX,
    SELECTOR_CLASS,
    SELECTOR_IDENTIFIER,
    SELECTOR_ELEMENT_NAME,
    SELECTOR_PSEUDO,
    SELECTOR_ATTRIBUTE,
    DECLARATION,
    DECLARATIONS,
    PROPERTY,
    EXPRESSION,
    BINARY_EXPRESSION,
    TERM,
    OPERATOR,
    STRING_LITERAL,
    URI_LITERAL,
    FUNCTION,
    NUMERIC_VALUE,
    HEX_COLOR_VALUE,
    RATIO_VALUE,
    PRIO,
    MEDIA,
    KEYFRAME,
    FONT_FACE,
    IMPORT,
    NAMESPACE,
    MEDIA_QUERY,
    MEDIA_CONDITION,
    MEDIA_FEATURE,
    FUNCTION_ARGUMENT,
    KEYFRAME_SELECTOR,
    VIEWPORT,
    DOCUMENT,
    CUSTOM_PROPERTY_DECLARATION,
    CUSTOM_PROPERTY_SET,
    SUPPORTS,
    SUPPORTS_CONDITION,
    NAMESPACE_PREFIX,
    GRID_LINE,
    UNKNOWN_AT_RULE,
    UNICODE_RANGE,
    LAYER,
    LAYER_NAME_LIST,
    PROPERTY_AT_RULE,
    CONTAINER,
    XCSS_EXTENDS_REFERENCE,
    XCSS_FUNCTION_PARAMETER,
    XCSS_MIXIN_DECLARATION,
    XCSS_MIXIN_REFERENCE,
    XCSS_VARIABLE_DECLARATION,
    SCSS_NESTED_PROPERTIES,
    SCSS_SELECTOR_PLACEHOLDER,
    SCSS_DEBUG,
    SCSS_IF_STATEMENT,
    SCSS_ELSE_STATEMENT,
    SCSS_FOR_STATEMENT,
    SCSS_EACH_STATEMENT,
    SCSS_WHILE_STATEMENT,
    SCSS_RETURN_STATEMENT,
    SCSS_FUNCTION_DECLARATION,
    SCSS_LIST_ENTRY,
    SCSS_USE,
    SCSS_MODULE,
    SCSS_MODULE_CONFIGURATION,
    SCSS_FORWARD,
    SCSS_FORWARD_VISIBILITY,
    SCSS_MIXIN_CONTENT_REFERENCE,
    SCSS_MIXIN_CONTENT_DECLARATION,
    SCSS_VARIABLE_NAME,
    LESS_ESCAPED_VALUE,
    LESS_INTERPOLATION,
    LESS_PLUGIN,
    #[doc(hidden)]
    __LAST,
}
use self::SyntaxKind::*;
impl SyntaxKind {
    pub fn is_dimension(self) -> bool {
        matches!(
            self,
            DIM_EM
                | DIM_EX
                | DIM_PX
                | DIM_CM
                | DIM_MM
                | DIM_IN
                | DIM_PT
                | DIM_PC
                | DIM_DEG
                | DIM_RAD
                | DIM_GRAD
                | DIM_MS
                | DIM_S
                | DIM_HZ
                | DIM_KHZ
                | DIM_PERCENT
                | DIM_FR
                | DIM_DPI
                | DIM_DPCM
                | DIM_CQW
                | DIM_CQH
                | DIM_CQI
                | DIM_CQB
                | DIM_CQMIN
                | DIM_CQMAX
        )
    }
    pub fn is_punct(self) -> bool {
        matches!(
            self,
            SEMICOLON
                | COMMA
                | L_PAREN
                | R_PAREN
                | L_CURLY
                | R_CURLY
                | L_BRACK
                | R_BRACK
                | L_ANGLE
                | R_ANGLE
                | AT
                | POUND
                | TILDE
                | QUESTION
                | DOLLAR
                | AMP
                | PIPE
                | PLUS
                | STAR
                | SLASH
                | CARET
                | PERCENT
                | UNDERSCORE
                | DOT
                | DOT2
                | DOT3
                | DOT2EQ
                | COLON
                | COLON2
                | EQ
                | EQ2
                | FAT_ARROW
                | BANG
                | NEQ
                | MINUS
                | THIN_ARROW
                | LTEQ
                | GTEQ
                | PLUSEQ
                | MINUSEQ
                | PIPEEQ
                | AMPEQ
                | CARETEQ
                | SLASHEQ
                | STAREQ
                | PERCENTEQ
                | AMP2
                | PIPE2
                | SHL
                | SHR
                | SHLEQ
                | SHREQ
        )
    }
    pub fn from_char(c: char) -> Option<SyntaxKind> {
        let tok = match c {
            ';' => SEMICOLON,
            ',' => COMMA,
            '(' => L_PAREN,
            ')' => R_PAREN,
            '{' => L_CURLY,
            '}' => R_CURLY,
            '[' => L_BRACK,
            ']' => R_BRACK,
            '<' => L_ANGLE,
            '>' => R_ANGLE,
            '@' => AT,
            '#' => POUND,
            '~' => TILDE,
            '?' => QUESTION,
            '$' => DOLLAR,
            '&' => AMP,
            '|' => PIPE,
            '+' => PLUS,
            '*' => STAR,
            '/' => SLASH,
            '^' => CARET,
            '%' => PERCENT,
            '_' => UNDERSCORE,
            '.' => DOT,
            ':' => COLON,
            '=' => EQ,
            '!' => BANG,
            '-' => MINUS,
            _ => return None,
        };
        Some(tok)
    }
}
#[macro_export]
macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [DIM_EM] => { $ crate :: SyntaxKind :: DIM_EM } ; [DIM_EX] => { $ crate :: SyntaxKind :: DIM_EX } ; [DIM_PX] => { $ crate :: SyntaxKind :: DIM_PX } ; [DIM_CM] => { $ crate :: SyntaxKind :: DIM_CM } ; [DIM_MM] => { $ crate :: SyntaxKind :: DIM_MM } ; [DIM_IN] => { $ crate :: SyntaxKind :: DIM_IN } ; [DIM_PT] => { $ crate :: SyntaxKind :: DIM_PT } ; [DIM_PC] => { $ crate :: SyntaxKind :: DIM_PC } ; [DIM_DEG] => { $ crate :: SyntaxKind :: DIM_DEG } ; [DIM_RAD] => { $ crate :: SyntaxKind :: DIM_RAD } ; [DIM_GRAD] => { $ crate :: SyntaxKind :: DIM_GRAD } ; [DIM_MS] => { $ crate :: SyntaxKind :: DIM_MS } ; [DIM_S] => { $ crate :: SyntaxKind :: DIM_S } ; [DIM_HZ] => { $ crate :: SyntaxKind :: DIM_HZ } ; [DIM_KHZ] => { $ crate :: SyntaxKind :: DIM_KHZ } ; [DIM_PERCENT] => { $ crate :: SyntaxKind :: DIM_PERCENT } ; [DIM_FR] => { $ crate :: SyntaxKind :: DIM_FR } ; [DIM_DPI] => { $ crate :: SyntaxKind :: DIM_DPI } ; [DIM_DPCM] => { $ crate :: SyntaxKind :: DIM_DPCM } ; [DIM_CQW] => { $ crate :: SyntaxKind :: DIM_CQW } ; [DIM_CQH] => { $ crate :: SyntaxKind :: DIM_CQH } ; [DIM_CQI] => { $ crate :: SyntaxKind :: DIM_CQI } ; [DIM_CQB] => { $ crate :: SyntaxKind :: DIM_CQB } ; [DIM_CQMIN] => { $ crate :: SyntaxKind :: DIM_CQMIN } ; [DIM_CQMAX] => { $ crate :: SyntaxKind :: DIM_CQMAX } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; }
