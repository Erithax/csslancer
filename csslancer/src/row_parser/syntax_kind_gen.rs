//! Generated by `sourcegen_ast`, do not edit by hand.

#![allow(bad_style, missing_docs, unreachable_pub)]
#[doc = r" The kind of syntax node, e.g. `IDENTIFIER`, `DIM_PX`, or `KEYFRAME`."]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
#[repr(u16)]
pub enum SyntaxKind {
    #[doc(hidden)]
    TOMBSTONE,
    #[doc(hidden)]
    EOF,
    ERROR,
    IDENTIFIER,
    STRING,
    URL,
    BAD_STRING,
    BAD_URL,
    UNRESTRICTED_HASH,
    ID_HASH,
    NUMBER,
    CHARSET,
    WHITESPACE,
    COMMENT,
    UNICODE_RANGE,
    FUNCTION,
    CDO,
    CDC,
    ATKW_UNKNOWN,
    ATKW_IMPORT,
    ATKW_NAMESPACE,
    ATKW_FONT_FACE,
    ATKW_VIEWPORT,
    ATKW__MS_VIEWPORT,
    ATKW__O_VIEWPORT,
    ATKW_KEYFRAMES,
    ATKW__WEBKIT_KEYFRAMES,
    ATKW__MOZ_KEYFRAMES,
    ATKW__O_KEYFRAMES,
    ATKW_PROPERTY,
    ATKW_LAYER,
    ATKW_SUPPORTS,
    ATKW_MEDIA,
    ATKW_PAGE,
    ATKW__MOZ_DOCUMENT,
    ATKW_CONTAINER,
    ATKW_MARGIN_AT_RULE,
    SEMICOLON,
    COMMA,
    EXCLAMATION,
    L_PAREN,
    R_PAREN,
    L_CURLY,
    R_CURLY,
    L_BRACK,
    R_BRACK,
    L_ANGLE,
    R_ANGLE,
    AT,
    POUND,
    TILDE,
    QUESTION,
    DOLLAR,
    AMP,
    PIPE,
    PLUS,
    STAR,
    SLASH,
    CARET,
    PERCENT,
    UNDERSCORE,
    DOT,
    DOT2,
    DOT3,
    DOT2EQ,
    COLON,
    COLON2,
    EQ,
    EQ2,
    FAT_ARROW,
    NEQ,
    MINUS,
    THIN_ARROW,
    LTEQ,
    GTEQ,
    PLUSEQ,
    MINUSEQ,
    OPERATOR_DASHMATCH,
    OPERATOR_INCLUDES,
    OPERATOR_PREFIX,
    OPERATOR_SUFFIX,
    OPERATOR_SUBSTRING,
    PERCENTEQ,
    AMP2,
    PIPE2,
    SHL,
    SHR,
    SHLEQ,
    SHREQ,
    DIM_UNKNOWN,
    DIM_EM,
    DIM_EX,
    DIM_PX,
    DIM_CM,
    DIM_MM,
    DIM_IN,
    DIM_PT,
    DIM_PC,
    DIM_DEG,
    DIM_RAD,
    DIM_GRAD,
    DIM_MS,
    DIM_S,
    DIM_HZ,
    DIM_KHZ,
    DIM_PERCENT,
    DIM_FR,
    DIM_DPI,
    DIM_DPCM,
    DIM_CQW,
    DIM_CQH,
    DIM_CQI,
    DIM_CQB,
    DIM_CQMIN,
    DIM_CQMAX,
    CXID_NOT,
    CXID_AND,
    CXID_OR,
    CXID_SCREEN,
    CXID_ONLY,
    CXID_DEEP,
    CXID_ATTRIB_I,
    CXID_ATTRIB_S,
    CXID_AN_PLUS_B_SYNTAX_AN,
    CXID_OF,
    CXID_IMPORTANT,
    CXID_PROGID,
    CXID_URLPREFIX,
    CXID_VALID_CUSTOM_PROP,
    CXFUNC_LAYER,
    CXFUNC_SUPPORTS,
    CXFUNC_STYLE,
    CXFUNC_URL,
    CXHASH_VALID_HEX,
    CXDIM_AN_PLUS_B,
    TODO,
    UNDEFINED,
    SOURCE_FILE,
    RULE_SET,
    PAGE,
    PAGE_BOX_MARGIN_BOX,
    VIEW_PORT,
    DOCUMENT,
    CUSTOM_PROPERTY_SET,
    SUPPORTS,
    FONT_FACE,
    MEDIA,
    LAYER,
    KEYFRAME,
    KEYFRAME_SELECTOR,
    CONTAINER,
    PROPERTY_AT_RULE,
    UNKNOWN_AT_RULE,
    SELECTOR,
    SIMPLE_SELECTOR,
    SELECTOR_INTERPOLATION,
    SELECTOR_COMBINATOR,
    SELECTOR_COMBINATOR_PARENT,
    SELECTOR_COMBINATOR_SIBLING,
    SELECTOR_COMBINATOR_ALL_SIBLINGS,
    SELECTOR_COMBINATOR_SHADOW_PIERCING_DESCENDANT,
    SELECTOR_CLASS,
    SELECTOR_IDENTIFIER,
    SELECTOR_ELEMENT_NAME,
    SELECTOR_PSEUDO,
    SELECTOR_ATTRIBUTE,
    ABSTRACT_DECLARATION,
    DECLARATION,
    DECLARATION_BASIC,
    DECLARATION_CUSTOM_PROPERTY,
    DECLARATION_XCSS_VARIABLE,
    DECLARATIONS,
    PROPERTY,
    EXPRESSION,
    BINARY_EXPRESSION,
    TERM,
    OPERATOR,
    STRING_LITERAL,
    URI_LITERAL,
    NUMERIC_VALUE,
    HEX_COLOR_VALUE,
    RATIO_VALUE,
    PRIO,
    IMPORT,
    NAMESPACE,
    MEDIA_QUERY,
    MEDIA_CONDITION,
    MEDIA_FEATURE,
    FUNCTION_WITH_ARGS,
    FUNCTION_ARGUMENT,
    SUPPORTS_CONDITION,
    NAMESPACE_PREFIX,
    GRID_LINE,
    LAYER_NAME_LIST,
    LAYER_NAME,
    XCSS_EXTENDS_REFERENCE,
    XCSS_FUNCTION_PARAMETER,
    XCSS_MIXIN_DECLARATION,
    XCSS_MIXIN_REFERENCE,
    SCSS_NESTED_PROPERTIES,
    SCSS_SELECTOR_PLACEHOLDER,
    SCSS_DEBUG,
    SCSS_IF_STATEMENT,
    SCSS_ELSE_STATEMENT,
    SCSS_FOR_STATEMENT,
    SCSS_EACH_STATEMENT,
    SCSS_WHILE_STATEMENT,
    SCSS_RETURN_STATEMENT,
    SCSS_FUNCTION_DECLARATION,
    SCSS_LIST_ENTRY,
    SCSS_USE,
    SCSS_MODULE,
    SCSS_MODULE_CONFIGURATION,
    SCSS_FORWARD,
    SCSS_FORWARD_VISIBILITY,
    SCSS_MIXIN_CONTENT_REFERENCE,
    SCSS_MIXIN_CONTENT_DECLARATION,
    SCSS_VARIABLE_NAME,
    LESS_ESCAPED_VALUE,
    LESS_INTERPOLATION,
    LESS_PLUGIN,
    #[doc(hidden)]
    __LAST,
}
use self::SyntaxKind::*;
impl SyntaxKind {
    pub fn is_dimension(self) -> bool {
        matches!(
            self,
            DIM_UNKNOWN
                | DIM_EM
                | DIM_EX
                | DIM_PX
                | DIM_CM
                | DIM_MM
                | DIM_IN
                | DIM_PT
                | DIM_PC
                | DIM_DEG
                | DIM_RAD
                | DIM_GRAD
                | DIM_MS
                | DIM_S
                | DIM_HZ
                | DIM_KHZ
                | DIM_PERCENT
                | DIM_FR
                | DIM_DPI
                | DIM_DPCM
                | DIM_CQW
                | DIM_CQH
                | DIM_CQI
                | DIM_CQB
                | DIM_CQMIN
                | DIM_CQMAX
        )
    }
    pub fn is_punct(self) -> bool {
        matches!(
            self,
            SEMICOLON
                | COMMA
                | EXCLAMATION
                | L_PAREN
                | R_PAREN
                | L_CURLY
                | R_CURLY
                | L_BRACK
                | R_BRACK
                | L_ANGLE
                | R_ANGLE
                | AT
                | POUND
                | TILDE
                | QUESTION
                | DOLLAR
                | AMP
                | PIPE
                | PLUS
                | STAR
                | SLASH
                | CARET
                | PERCENT
                | UNDERSCORE
                | DOT
                | DOT2
                | DOT3
                | DOT2EQ
                | COLON
                | COLON2
                | EQ
                | EQ2
                | FAT_ARROW
                | NEQ
                | MINUS
                | THIN_ARROW
                | LTEQ
                | GTEQ
                | PLUSEQ
                | MINUSEQ
                | OPERATOR_DASHMATCH
                | OPERATOR_INCLUDES
                | OPERATOR_PREFIX
                | OPERATOR_SUFFIX
                | OPERATOR_SUBSTRING
                | PERCENTEQ
                | AMP2
                | PIPE2
                | SHL
                | SHR
                | SHLEQ
                | SHREQ
        )
    }
    pub fn is_at_keyword(self) -> bool {
        matches!(
            self,
            ATKW_UNKNOWN
                | ATKW_IMPORT
                | ATKW_NAMESPACE
                | ATKW_FONT_FACE
                | ATKW_VIEWPORT
                | ATKW__MS_VIEWPORT
                | ATKW__O_VIEWPORT
                | ATKW_KEYFRAMES
                | ATKW__WEBKIT_KEYFRAMES
                | ATKW__MOZ_KEYFRAMES
                | ATKW__O_KEYFRAMES
                | ATKW_PROPERTY
                | ATKW_LAYER
                | ATKW_SUPPORTS
                | ATKW_MEDIA
                | ATKW_PAGE
                | ATKW__MOZ_DOCUMENT
                | ATKW_CONTAINER
                | ATKW_MARGIN_AT_RULE
        )
    }
    pub fn is_cx_keyword(self) -> bool {
        matches!(
            self,
            CXID_NOT
                | CXID_AND
                | CXID_OR
                | CXID_SCREEN
                | CXID_ONLY
                | CXID_DEEP
                | CXID_ATTRIB_I
                | CXID_ATTRIB_S
                | CXID_AN_PLUS_B_SYNTAX_AN
                | CXID_OF
                | CXID_IMPORTANT
                | CXID_PROGID
                | CXID_URLPREFIX
                | CXID_VALID_CUSTOM_PROP
        )
    }
    pub fn from_contextual_keyword(ident: &str) -> Option<SyntaxKind> {
        let kw = match ident.to_lowercase().as_str() {
            "not" => CXID_NOT,
            "and" => CXID_AND,
            "or" => CXID_OR,
            "screen" => CXID_SCREEN,
            "only" => CXID_ONLY,
            "deep" => CXID_DEEP,
            "attrib_i" => CXID_ATTRIB_I,
            "attrib_s" => CXID_ATTRIB_S,
            "an_plus_b_syntax_an" => CXID_AN_PLUS_B_SYNTAX_AN,
            "of" => CXID_OF,
            "important" => CXID_IMPORTANT,
            "progid" => CXID_PROGID,
            "urlprefix" => CXID_URLPREFIX,
            "valid_custom_prop" => CXID_VALID_CUSTOM_PROP,
            _ => return None,
        };
        Some(kw)
    }
    pub fn from_char(c: char) -> Option<SyntaxKind> {
        let tok = match c {
            ';' => SEMICOLON,
            ',' => COMMA,
            '!' => EXCLAMATION,
            '(' => L_PAREN,
            ')' => R_PAREN,
            '{' => L_CURLY,
            '}' => R_CURLY,
            '[' => L_BRACK,
            ']' => R_BRACK,
            '<' => L_ANGLE,
            '>' => R_ANGLE,
            '@' => AT,
            '#' => POUND,
            '~' => TILDE,
            '?' => QUESTION,
            '$' => DOLLAR,
            '&' => AMP,
            '|' => PIPE,
            '+' => PLUS,
            '*' => STAR,
            '/' => SLASH,
            '^' => CARET,
            '%' => PERCENT,
            '_' => UNDERSCORE,
            '.' => DOT,
            ':' => COLON,
            '=' => EQ,
            '-' => MINUS,
            _ => return None,
        };
        Some(tok)
    }
}
#[macro_export]
macro_rules ! T { [;] => { SyntaxKind :: SEMICOLON } ; [,] => { SyntaxKind :: COMMA } ; [!] => { SyntaxKind :: EXCLAMATION } ; ['('] => { SyntaxKind :: L_PAREN } ; [')'] => { SyntaxKind :: R_PAREN } ; ['{'] => { SyntaxKind :: L_CURLY } ; ['}'] => { SyntaxKind :: R_CURLY } ; ['['] => { SyntaxKind :: L_BRACK } ; [']'] => { SyntaxKind :: R_BRACK } ; [<] => { SyntaxKind :: L_ANGLE } ; [>] => { SyntaxKind :: R_ANGLE } ; [@] => { SyntaxKind :: AT } ; [#] => { SyntaxKind :: POUND } ; [~] => { SyntaxKind :: TILDE } ; [?] => { SyntaxKind :: QUESTION } ; [$] => { SyntaxKind :: DOLLAR } ; [&] => { SyntaxKind :: AMP } ; [|] => { SyntaxKind :: PIPE } ; [+] => { SyntaxKind :: PLUS } ; [*] => { SyntaxKind :: STAR } ; [/] => { SyntaxKind :: SLASH } ; [^] => { SyntaxKind :: CARET } ; [%] => { SyntaxKind :: PERCENT } ; [_] => { SyntaxKind :: UNDERSCORE } ; [.] => { SyntaxKind :: DOT } ; [..] => { SyntaxKind :: DOT2 } ; [...] => { SyntaxKind :: DOT3 } ; [..=] => { SyntaxKind :: DOT2EQ } ; [:] => { SyntaxKind :: COLON } ; [::] => { SyntaxKind :: COLON2 } ; [=] => { SyntaxKind :: EQ } ; [==] => { SyntaxKind :: EQ2 } ; [=>] => { SyntaxKind :: FAT_ARROW } ; [!=] => { SyntaxKind :: NEQ } ; [-] => { SyntaxKind :: MINUS } ; [->] => { SyntaxKind :: THIN_ARROW } ; [<=] => { SyntaxKind :: LTEQ } ; [>=] => { SyntaxKind :: GTEQ } ; [+=] => { SyntaxKind :: PLUSEQ } ; [-=] => { SyntaxKind :: MINUSEQ } ; [|=] => { SyntaxKind :: OPERATOR_DASHMATCH } ; [~=] => { SyntaxKind :: OPERATOR_INCLUDES } ; [^=] => { SyntaxKind :: OPERATOR_PREFIX } ; [DOLLAR =] => { SyntaxKind :: OPERATOR_SUFFIX } ; [*=] => { SyntaxKind :: OPERATOR_SUBSTRING } ; [%=] => { SyntaxKind :: PERCENTEQ } ; [&&] => { SyntaxKind :: AMP2 } ; [||] => { SyntaxKind :: PIPE2 } ; [<<] => { SyntaxKind :: SHL } ; [>>] => { SyntaxKind :: SHR } ; [<<=] => { SyntaxKind :: SHLEQ } ; [>>=] => { SyntaxKind :: SHREQ } ; [error] => { SyntaxKind :: ERROR } ; [identifier] => { SyntaxKind :: IDENTIFIER } ; [string] => { SyntaxKind :: STRING } ; [url] => { SyntaxKind :: URL } ; [bad_string] => { SyntaxKind :: BAD_STRING } ; [bad_url] => { SyntaxKind :: BAD_URL } ; [unrestricted_hash] => { SyntaxKind :: UNRESTRICTED_HASH } ; [id_hash] => { SyntaxKind :: ID_HASH } ; [number] => { SyntaxKind :: NUMBER } ; [charset] => { SyntaxKind :: CHARSET } ; [whitespace] => { SyntaxKind :: WHITESPACE } ; [comment] => { SyntaxKind :: COMMENT } ; [unicode_range] => { SyntaxKind :: UNICODE_RANGE } ; [function] => { SyntaxKind :: FUNCTION } ; [cdo] => { SyntaxKind :: CDO } ; [cdc] => { SyntaxKind :: CDC } ; [@ unknown] => { SyntaxKind :: ATKW_UNKNOWN } ; [@ import] => { SyntaxKind :: ATKW_IMPORT } ; [@ namespace] => { SyntaxKind :: ATKW_NAMESPACE } ; [@ font_face] => { SyntaxKind :: ATKW_FONT_FACE } ; [@ viewport] => { SyntaxKind :: ATKW_VIEWPORT } ; [@ _ms_viewport] => { SyntaxKind :: ATKW__MS_VIEWPORT } ; [@ _o_viewport] => { SyntaxKind :: ATKW__O_VIEWPORT } ; [@ keyframes] => { SyntaxKind :: ATKW_KEYFRAMES } ; [@ _webkit_keyframes] => { SyntaxKind :: ATKW__WEBKIT_KEYFRAMES } ; [@ _moz_keyframes] => { SyntaxKind :: ATKW__MOZ_KEYFRAMES } ; [@ _o_keyframes] => { SyntaxKind :: ATKW__O_KEYFRAMES } ; [@ property] => { SyntaxKind :: ATKW_PROPERTY } ; [@ layer] => { SyntaxKind :: ATKW_LAYER } ; [@ supports] => { SyntaxKind :: ATKW_SUPPORTS } ; [@ media] => { SyntaxKind :: ATKW_MEDIA } ; [@ page] => { SyntaxKind :: ATKW_PAGE } ; [@ _moz_document] => { SyntaxKind :: ATKW__MOZ_DOCUMENT } ; [@ container] => { SyntaxKind :: ATKW_CONTAINER } ; [@ margin_at_rule] => { SyntaxKind :: ATKW_MARGIN_AT_RULE } ; [DIM_UNKNOWN] => { SyntaxKind :: DIM_UNKNOWN } ; [DIM_EM] => { SyntaxKind :: DIM_EM } ; [DIM_EX] => { SyntaxKind :: DIM_EX } ; [DIM_PX] => { SyntaxKind :: DIM_PX } ; [DIM_CM] => { SyntaxKind :: DIM_CM } ; [DIM_MM] => { SyntaxKind :: DIM_MM } ; [DIM_IN] => { SyntaxKind :: DIM_IN } ; [DIM_PT] => { SyntaxKind :: DIM_PT } ; [DIM_PC] => { SyntaxKind :: DIM_PC } ; [DIM_DEG] => { SyntaxKind :: DIM_DEG } ; [DIM_RAD] => { SyntaxKind :: DIM_RAD } ; [DIM_GRAD] => { SyntaxKind :: DIM_GRAD } ; [DIM_MS] => { SyntaxKind :: DIM_MS } ; [DIM_S] => { SyntaxKind :: DIM_S } ; [DIM_HZ] => { SyntaxKind :: DIM_HZ } ; [DIM_KHZ] => { SyntaxKind :: DIM_KHZ } ; [DIM_PERCENT] => { SyntaxKind :: DIM_PERCENT } ; [DIM_FR] => { SyntaxKind :: DIM_FR } ; [DIM_DPI] => { SyntaxKind :: DIM_DPI } ; [DIM_DPCM] => { SyntaxKind :: DIM_DPCM } ; [DIM_CQW] => { SyntaxKind :: DIM_CQW } ; [DIM_CQH] => { SyntaxKind :: DIM_CQH } ; [DIM_CQI] => { SyntaxKind :: DIM_CQI } ; [DIM_CQB] => { SyntaxKind :: DIM_CQB } ; [DIM_CQMIN] => { SyntaxKind :: DIM_CQMIN } ; [DIM_CQMAX] => { SyntaxKind :: DIM_CQMAX } ; [cxid_not] => { SyntaxKind :: CXID_NOT } ; [cxid_and] => { SyntaxKind :: CXID_AND } ; [cxid_or] => { SyntaxKind :: CXID_OR } ; [cxid_screen] => { SyntaxKind :: CXID_SCREEN } ; [cxid_only] => { SyntaxKind :: CXID_ONLY } ; [cxid_deep] => { SyntaxKind :: CXID_DEEP } ; [cxid_attrib_i] => { SyntaxKind :: CXID_ATTRIB_I } ; [cxid_attrib_s] => { SyntaxKind :: CXID_ATTRIB_S } ; [cxid_an_plus_b_syntax_an] => { SyntaxKind :: CXID_AN_PLUS_B_SYNTAX_AN } ; [cxid_of] => { SyntaxKind :: CXID_OF } ; [cxid_important] => { SyntaxKind :: CXID_IMPORTANT } ; [cxid_progid] => { SyntaxKind :: CXID_PROGID } ; [cxid_urlprefix] => { SyntaxKind :: CXID_URLPREFIX } ; [cxid_valid_custom_prop] => { SyntaxKind :: CXID_VALID_CUSTOM_PROP } ; [cxfunc_layer] => { SyntaxKind :: CXFUNC_LAYER } ; [cxfunc_supports] => { SyntaxKind :: CXFUNC_SUPPORTS } ; [cxfunc_style] => { SyntaxKind :: CXFUNC_STYLE } ; [cxfunc_url] => { SyntaxKind :: CXFUNC_URL } ; [cxhash_valid_hex] => { SyntaxKind :: CXHASH_VALID_HEX } ; [cxdim_an_plus_b] => { SyntaxKind :: CXDIM_AN_PLUS_B } ; }
